import { 
  collection, 
  addDoc, 
  getDocs, 
  doc, 
  getDoc, 
  updateDoc, 
  deleteDoc, 
  query, 
  orderBy, 
  where,
  serverTimestamp,
  Timestamp
} from 'firebase/firestore';
import { db } from './firebase';
import { CampType, CreateCampTypeData, UpdateCampTypeData } from '@/types/campType';

const CAMP_TYPES_COLLECTION = 'campTypes';

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∫—ç–º–ø–∞
export async function createCampType(data: CreateCampTypeData): Promise<CampType> {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∏–ø –∫—ç–º–ø–∞:', data);

  const campTypeData = {
    name: data.name,
    description: data.description,
    color: data.color,
    icon: data.icon || '',
    isActive: true,
    createdAt: serverTimestamp(),
    updatedAt: serverTimestamp(),
  };

  try {
    const docRef = await addDoc(collection(db, CAMP_TYPES_COLLECTION), campTypeData);
    console.log('‚úÖ –¢–∏–ø –∫—ç–º–ø–∞ —Å–æ–∑–¥–∞–Ω —Å ID:', docRef.id);
    
    return {
      id: docRef.id,
      ...data,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –∫—ç–º–ø–∞:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤
export async function getAllCampTypes(): Promise<CampType[]> {
  try {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤ –∏–∑ Firestore');
    
    const typesRef = collection(db, CAMP_TYPES_COLLECTION);
    const q = query(typesRef, orderBy('createdAt', 'desc'));
    const querySnapshot = await getDocs(q);
    
    const campTypes = querySnapshot.docs.map(doc => {
      const data = doc.data();
      return {
        id: doc.id,
        name: data.name,
        description: data.description,
        color: data.color,
        icon: data.icon || '',
        isActive: data.isActive !== false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω
        createdAt: data.createdAt instanceof Timestamp ? data.createdAt.toDate() : new Date(data.createdAt),
        updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate() : new Date(data.updatedAt),
      } as CampType;
    });
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${campTypes.length} —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤`);
    return campTypes;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤
export async function getActiveCampTypes(): Promise<CampType[]> {
  try {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤ –∏–∑ Firestore');
    
    const typesRef = collection(db, CAMP_TYPES_COLLECTION);
    const q = query(typesRef, orderBy('createdAt', 'desc'));
    const querySnapshot = await getDocs(q);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const campTypes = querySnapshot.docs
      .map(doc => {
        const data = doc.data();
        return {
          id: doc.id,
          name: data.name,
          description: data.description,
          color: data.color,
          icon: data.icon || '',
          isActive: data.isActive !== false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω
          createdAt: data.createdAt instanceof Timestamp ? data.createdAt.toDate() : new Date(data.createdAt),
          updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate() : new Date(data.updatedAt),
        } as CampType;
      })
      .filter(type => type.isActive); // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${campTypes.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤`);
    return campTypes;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫—ç–º–ø–∞ –ø–æ ID
export async function getCampTypeById(id: string): Promise<CampType | null> {
  try {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø –∫—ç–º–ø–∞ –ø–æ ID:', id);
    
    const docRef = doc(db, CAMP_TYPES_COLLECTION, id);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      const data = docSnap.data();
      const campType = {
        id: docSnap.id,
        name: data.name,
        description: data.description,
        color: data.color,
        icon: data.icon || '',
        isActive: data.isActive !== false,
        createdAt: data.createdAt instanceof Timestamp ? data.createdAt.toDate() : new Date(data.createdAt),
        updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate() : new Date(data.updatedAt),
      } as CampType;
      
      console.log('‚úÖ –¢–∏–ø –∫—ç–º–ø–∞ –Ω–∞–π–¥–µ–Ω:', campType.name);
      return campType;
    } else {
      console.log('‚ùå –¢–∏–ø –∫—ç–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–∞ –∫—ç–º–ø–∞:', error);
    return null;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫—ç–º–ø–∞
export async function updateCampType(id: string, data: UpdateCampTypeData): Promise<void> {
  console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –∫—ç–º–ø–∞:', id, data);

  const updateData: any = {
    updatedAt: serverTimestamp(),
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
  if (data.name !== undefined) updateData.name = data.name;
  if (data.description !== undefined) updateData.description = data.description;
  if (data.color !== undefined) updateData.color = data.color;
  if (data.icon !== undefined) updateData.icon = data.icon;
  if (data.isActive !== undefined) updateData.isActive = data.isActive;

  try {
    const docRef = doc(db, CAMP_TYPES_COLLECTION, id);
    await updateDoc(docRef, updateData);
    console.log('‚úÖ –¢–∏–ø –∫—ç–º–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫—ç–º–ø–∞:', error);
    throw error;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫—ç–º–ø–∞
export async function deleteCampType(id: string): Promise<void> {
  console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–∏–ø –∫—ç–º–ø–∞:', id);

  try {
    const docRef = doc(db, CAMP_TYPES_COLLECTION, id);
    await deleteDoc(docRef);
    console.log('‚úÖ –¢–∏–ø –∫—ç–º–ø–∞ —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫—ç–º–ø–∞:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤
export async function seedCampTypes(): Promise<void> {
  console.log('üå± –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤');

  const initialTypes: CreateCampTypeData[] = [
    {
      name: '–ª–µ—Ç–Ω–∏–π',
      description: '–õ–µ—Ç–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥—ã—Ö –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ',
      color: '#f59e0b',
      icon: '‚òÄÔ∏è'
    },
    {
      name: '–∑–∏–º–Ω–∏–π',
      description: '–ó–∏–º–Ω–∏–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
      color: '#0ea5e9',
      icon: '‚ùÑÔ∏è'
    },
    {
      name: '—è–∑—ã–∫–æ–≤–æ–π',
      description: '–ò–∑—É—á–µ–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ',
      color: '#8b5cf6',
      icon: 'üåç'
    },
    {
      name: '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π',
      description: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      color: '#10b981',
      icon: '‚öΩ'
    },
    {
      name: '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π',
      description: '–ò—Å–∫—É—Å—Å—Ç–≤–æ, –º—É–∑—ã–∫–∞, —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
      color: '#f43f5e',
      icon: 'üé®'
    },
    {
      name: '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π',
      description: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      color: '#6366f1',
      icon: 'üíª'
    },
    {
      name: '–ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π',
      description: '–ü–æ—Ö–æ–¥—ã, —Å–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞',
      color: '#f97316',
      icon: 'üèîÔ∏è'
    },
    {
      name: '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π',
      description: '–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤',
      color: '#4f46e5',
      icon: 'üìö'
    }
  ];

  try {
    for (const typeData of initialTypes) {
      await createCampType(typeData);
    }
    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤ —Å–æ–∑–¥–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤:', error);
    throw error;
  }
} 