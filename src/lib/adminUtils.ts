import { collection, query, where, getDocs, updateDoc, doc } from 'firebase/firestore';
import { db } from './firebase';
import { UserProfile, UserRole } from '@/types/user';
import { getAllUsers } from './userService';

/**
 * –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ email
 */
export async function setUserRoleByEmail(email: string, role: UserRole): Promise<boolean> {
  try {
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const usersRef = collection(db, 'userProfiles');
    const q = query(usersRef, where('email', '==', email));
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
      console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return false;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDoc = querySnapshot.docs[0];
    const userRef = doc(db, 'userProfiles', userDoc.id);
    
    await updateDoc(userRef, {
      role: role,
      updatedAt: new Date()
    });
    
    console.log(`–†–æ–ª—å ${role} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${email}`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏:', error);
    return false;
  }
}

/**
 * –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ email
 */
export async function makeUserAdmin(email: string): Promise<boolean> {
  return await setUserRoleByEmail(email, 'admin');
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
export async function getAdmins(): Promise<UserProfile[]> {
  try {
    const usersRef = collection(db, 'userProfiles');
    const q = query(usersRef, where('role', '==', 'admin'));
    const querySnapshot = await getDocs(q);
    
    return querySnapshot.docs.map(doc => {
      const data = doc.data();
      return {
        uid: data.uid,
        email: data.email,
        displayName: data.displayName || undefined,
        photoURL: data.photoURL || undefined,
        role: data.role as UserRole,
        createdAt: data.createdAt?.toDate() || new Date(),
        updatedAt: data.updatedAt?.toDate() || new Date(),
      };
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤:', error);
    return [];
  }
}

// –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
if (typeof window !== 'undefined') {
  // @ts-ignore
  window.adminUtils = {
    makeUserAdmin,
    setUserRoleByEmail,
    getAdmins,
    getAllUsers,
    
    // –ë—ã—Å—Ç—Ä–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–ºorneff@gmail.com –∞–¥–º–∏–Ω–æ–º
    makeAmorneffAdmin: () => makeUserAdmin('amorneff@gmail.com'),
    
    // –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    goToTest: () => window.location.href = '/test-registration',
    goToAdmin: () => window.location.href = '/admin',
    goToUsers: () => window.location.href = '/admin/users',
    
    // –ü–æ–º–æ—â—å
    help: () => {
      console.log(`
üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã:

üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏:
- window.adminUtils.makeUserAdmin('email@example.com')
- window.adminUtils.setUserRoleByEmail('email@example.com', 'admin')
- window.adminUtils.makeAmorneffAdmin()
- window.adminUtils.getAdmins()
- window.adminUtils.getAllUsers()

üìç –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:
- window.adminUtils.goToTest()    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
- window.adminUtils.goToAdmin()   // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å  
- window.adminUtils.goToUsers()   // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

üîç –û—Ç–ª–∞–¥–∫–∞:
- window.adminUtils.help()        // –≠—Ç–∞ –ø–æ–º–æ—â—å
      `);
    }
  };
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
  if (process.env.NODE_ENV === 'development') {
    console.log('üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –í–≤–µ–¥–∏—Ç–µ window.adminUtils.help() –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
  }
} 