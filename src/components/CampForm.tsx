'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { CalendarIcon, MapPin, Plus, X, Upload } from 'lucide-react';
import { CreateCampData, CampVariant, Camp, CampType } from '@/types/camp';
import { CampType as CampTypeEntity } from '@/types/campType';
import { getActiveCampTypes } from '@/lib/campTypeService';
import { toast } from 'sonner';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { cn } from '@/lib/utils';
import { useOrganizers } from '@/hooks/useOrganizers';

interface CampFormProps {
  onSubmit: (campData: CreateCampData) => Promise<void>;
  onCancel?: () => void;
  isLoading?: boolean;
  initialData?: Camp | null;
  isEditing?: boolean;
}

export const CampForm: React.FC<CampFormProps> = ({
  onSubmit,
  onCancel,
  isLoading = false,
  initialData = null,
  isEditing = false,
}) => {
  const [formData, setFormData] = useState<CreateCampData>({
    title: '',
    description: '',
    startDate: new Date(),
    endDate: new Date(),
    location: '',
    type: '',
    status: 'draft',
    price: undefined,
    variants: [],
    organizerId: '',
    image: '',
    campUrl: '',
    directBooking: false,
    features: [],
    included: [],
  });

  const [newFeature, setNewFeature] = useState('');
  const [newIncluded, setNewIncluded] = useState('');
  const [imageInputType, setImageInputType] = useState<'url' | 'file'>('url');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [useVariants, setUseVariants] = useState(false);
  const [campTypes, setCampTypes] = useState<CampTypeEntity[]>([]);
  const [loadingTypes, setLoadingTypes] = useState(true);
  const { organizers, loading: loadingOrganizers, error: errorOrganizers } = useOrganizers();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const loadCampTypes = async () => {
      try {
        setLoadingTypes(true);
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        const types = await getActiveCampTypes();
        setCampTypes(types);
        
        // –ï—Å–ª–∏ —Ç–∏–ø–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ
        if (types.length === 0) {
          console.log('–¢–∏–ø—ã –∫—ç–º–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ');
        } else {
          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤:', types.length, types.map(t => t.name));
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤:', error);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤');
      } finally {
        setLoadingTypes(false);
      }
    };

    loadCampTypes();
  }, []);

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã –¥–ª—è fallback
  const staticCampTypes: CampType[] = [
    '–ª–µ—Ç–Ω–∏–π',
    '–∑–∏–º–Ω–∏–π',
    '—è–∑—ã–∫–æ–≤–æ–π',
    '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π',
    '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π',
    '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π',
    '–ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π',
    '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π',
  ];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ
  const availableTypes = campTypes.length > 0 ? campTypes.map(t => t.name) : staticCampTypes;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–∞—Ö
  const currentTypeExists = availableTypes.includes(formData.type);

  useEffect(() => {
    // –ñ–¥–µ–º, –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –∏ initialData
    if (initialData && !loadingOrganizers && organizers.length > 0) {
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º id —á–µ—Ä–µ–∑ String.trim()
      const orgId = String(initialData.organizerId || '').trim();
      const orgExists = organizers.some(o => String(o.id).trim() === orgId);
      console.log('[CampForm] useEffect: initialData.organizerId =', orgId);
      console.log('[CampForm] useEffect: organizers =', organizers.map(o => o.id));
      console.log('[CampForm] useEffect: orgExists =', orgExists);
      setFormData({
        title: initialData.title,
        description: initialData.description,
        startDate: initialData.startDate,
        endDate: initialData.endDate,
        location: initialData.location,
        type: initialData.type || (availableTypes.length > 0 ? availableTypes[0] : ''),
        status: initialData.status,
        price: initialData.price,
        variants: initialData.variants || [],
        organizerId: orgExists ? orgId : '',
        image: initialData.image || '',
        campUrl: initialData.campUrl || '',
        directBooking: initialData.directBooking || false,
        features: initialData.features,
        included: initialData.included,
      });
      setUseVariants(Boolean(initialData.variants && initialData.variants.length > 0));
    }
  }, [initialData, loadingOrganizers, organizers]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.title.trim()) {
      toast.error('–ù–∞–∑–≤–∞–Ω–∏–µ –∫—ç–º–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }
    
    if (!formData.description.trim()) {
      toast.error('–û–ø–∏—Å–∞–Ω–∏–µ –∫—ç–º–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }
    
    if (!formData.organizerId) {
      toast.error('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      return;
    }
    
    if (!formData.location.trim()) {
      toast.error('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }
    
    if (!formData.campUrl.trim()) {
      toast.error('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—ç–º–ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    try {
      new URL(formData.campUrl);
    } catch {
      toast.error('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—ç–º–ø –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com)');
      return;
    }
    
    if (!formData.type || formData.type.trim() === '') {
      toast.error('–¢–∏–ø –∫—ç–º–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–∞—Ö
    if (!availableTypes.includes(formData.type)) {
      toast.error('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∫—ç–º–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }
    
    if (formData.endDate <= formData.startDate) {
      toast.error('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
    if (useVariants) {
      if (!formData.variants || formData.variants.length === 0) {
        toast.error('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —É—á–∞—Å—Ç–∏—è');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      for (const variant of formData.variants) {
        if (!variant.name.trim()) {
          toast.error('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
          return;
        }
        if (!variant.description.trim()) {
          toast.error('–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
          return;
        }
        // –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ (price –ø–æ –∑–∞–ø—Ä–æ—Å—É)
        if (variant.price !== undefined && variant.price <= 0) {
          toast.error('–¶–µ–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
          return;
        }
      }
    }
    // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submitData = {
        ...formData,
        // –£–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è
        ...(useVariants ? { price: undefined } : { variants: undefined }),
      };

      await onSubmit(submitData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç–º–ø–∞:', error);
    }
  };

  const addFeature = () => {
    if (newFeature.trim() && !formData.features.includes(newFeature.trim())) {
      setFormData(prev => ({
        ...prev,
        features: [...prev.features, newFeature.trim()]
      }));
      setNewFeature('');
    }
  };

  const removeFeature = (feature: string) => {
    setFormData(prev => ({
      ...prev,
      features: prev.features.filter(f => f !== feature)
    }));
  };

  const addIncluded = () => {
    if (newIncluded.trim() && !formData.included.includes(newIncluded.trim())) {
      setFormData(prev => ({
        ...prev,
        included: [...prev.included, newIncluded.trim()]
      }));
      setNewIncluded('');
    }
  };

  const removeIncluded = (item: string) => {
    setFormData(prev => ({
      ...prev,
      included: prev.included.filter(i => i !== item)
    }));
  };

  const addVariant = () => {
    const newVariant: CampVariant = {
      id: Date.now().toString(),
      name: '',
      description: '',
      price: 0,
    };
    setFormData(prev => ({
      ...prev,
      variants: [...(prev.variants || []), newVariant]
    }));
  };

  const removeVariant = (variantId: string) => {
    setFormData(prev => ({
      ...prev,
      variants: prev.variants?.filter(v => v.id !== variantId) || []
    }));
  };

  const updateVariant = (variantId: string, field: keyof CampVariant, value: string | number | undefined) => {
    setFormData(prev => ({
      ...prev,
      variants: prev.variants?.map(v => 
        v.id === variantId ? { ...v, [field]: value } : v
      ) || []
    }));
  };

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
      toast.info('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const isDataLoading = isEditing && (loadingOrganizers || loadingTypes);

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—ç–º–ø' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—ç–º–ø'}
        </CardTitle>
        <CardDescription>
          {isEditing 
            ? '–ò–∑–º–µ–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç–º–ø–µ'
            : '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—ç–º–ø–∞'
          }
        </CardDescription>
      </CardHeader>
      
      <CardContent>
        {isDataLoading ? (
          <div className="flex items-center justify-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mr-3"></div>
            <span>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
          </div>
        ) : (
          <form onSubmit={handleSubmit} className="space-y-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor="title" className="mb-2 block">–ù–∞–∑–≤–∞–Ω–∏–µ –∫—ç–º–ø–∞ *</Label>
              <Input
                id="title"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—ç–º–ø–∞"
                value={formData.title}
                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                disabled={isLoading}
                className="cursor-text"
              />
            </div>

            <div>
              <Label htmlFor="organizer" className="mb-2 block">–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä *</Label>
              <Select
                key={formData.organizerId + '-' + organizers.map(o => o.id).join(',')}
                value={formData.organizerId}
                onValueChange={(value) => setFormData(prev => ({ ...prev, organizerId: value }))}
                disabled={isLoading || loadingOrganizers}
              >
                <SelectTrigger className="cursor-pointer">
                  <SelectValue placeholder={loadingOrganizers ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : (formData.organizerId ? organizers.find(o => String(o.id).trim() === String(formData.organizerId).trim())?.name : '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞')} />
                </SelectTrigger>
                <SelectContent>
                  {organizers.map((org) => (
                    <SelectItem key={org.id} value={org.id} className="cursor-pointer">
                      {org.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errorOrganizers && <div className="text-destructive text-sm mt-1">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤</div>}
            </div>
          </div>

          <div>
            <Label htmlFor="description" className="mb-2 block">–û–ø–∏—Å–∞–Ω–∏–µ –∫—ç–º–ø–∞ *</Label>
            <Textarea
              id="description"
              placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫—ç–º–ø–∞, —á—Ç–æ –∂–¥–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              disabled={isLoading}
              rows={4}
              className="cursor-text"
            />
          </div>

          {/* –î–∞—Ç—ã */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label className="mb-2 block">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ *</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal cursor-pointer",
                      !formData.startDate && "text-muted-foreground"
                    )}
                    disabled={isLoading}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {formData.startDate ? format(formData.startDate, "PPP", { locale: ru }) : <span>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={formData.startDate}
                    onSelect={(date) => date && setFormData(prev => ({ ...prev, startDate: date }))}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>

            <div>
              <Label className="mb-2 block">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è *</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal cursor-pointer",
                      !formData.endDate && "text-muted-foreground"
                    )}
                    disabled={isLoading}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {formData.endDate ? format(formData.endDate, "PPP", { locale: ru }) : <span>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={formData.endDate}
                    onSelect={(date) => date && setFormData(prev => ({ ...prev, endDate: date }))}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>

          {/* –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—ç–º–ø */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor="location" className="mb-2 block">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ *</Label>
              <div className="relative">
                <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  id="location"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ, –±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞ '–ë–µ—Ä–µ–∑–∫–∏'"
                  value={formData.location}
                  onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                  className="pl-10 cursor-text"
                  disabled={isLoading}
                />
              </div>
            </div>

            <div>
              <Label htmlFor="campUrl" className="mb-2 block">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—ç–º–ø *</Label>
              <div className="relative">
                <Input
                  id="campUrl"
                  placeholder="https://example.com/camp"
                  value={formData.campUrl}
                  onChange={(e) => setFormData(prev => ({ ...prev, campUrl: e.target.value }))}
                  className="cursor-text"
                  disabled={isLoading}
                />
                <p className="text-xs text-muted-foreground mt-1">
                  –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—ç–º–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com/camp)
                </p>
              </div>
            </div>

            <div>
              <Label htmlFor="directBooking" className="mb-2 block">–ü—Ä—è–º–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</Label>
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="directBooking"
                  checked={formData.directBooking}
                  onChange={(e) => setFormData(prev => ({ ...prev, directBooking: e.target.checked }))}
                  disabled={isLoading}
                  className="cursor-pointer"
                />
                <Label htmlFor="directBooking" className="cursor-pointer text-sm">
                  –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä—è–º–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ
                </Label>
              </div>
              <p className="text-xs text-muted-foreground mt-1">
                –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ –Ω–∞ —Å–∞–π—Ç–µ
              </p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor="type" className="mb-2 block">–¢–∏–ø –∫—ç–º–ø–∞ *</Label>
              <Select
                key={`type-${formData.type}`}
                value={formData.type}
                onValueChange={(value: CampType) => setFormData(prev => ({ ...prev, type: value }))}
                disabled={isLoading || loadingTypes}
              >
                <SelectTrigger className="cursor-pointer">
                  <SelectValue placeholder={formData.type ? formData.type : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} />
                </SelectTrigger>
                <SelectContent>
                  {availableTypes.map((type) => (
                    <SelectItem key={type} value={type} className="cursor-pointer">
                      {type}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ */}
          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <input
                type="radio"
                id="singlePrice"
                checked={!useVariants}
                onChange={() => setUseVariants(false)}
                disabled={isLoading}
                className="cursor-pointer"
              />
              <Label htmlFor="singlePrice" className="cursor-pointer">–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞</Label>
              
              <input
                type="radio"
                id="variants"
                checked={useVariants}
                onChange={() => setUseVariants(true)}
                disabled={isLoading}
                className="cursor-pointer"
              />
              <Label htmlFor="variants" className="cursor-pointer">–í–∞—Ä–∏–∞–Ω—Ç—ã —É—á–∞—Å—Ç–∏—è</Label>
            </div>

            {!useVariants ? (
              <div>
                <Label htmlFor="price" className="mb-2 block">–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</Label>
                <Input
                  id="price"
                  type="number"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è '—Ü–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É')"
                  value={formData.price || ''}
                  onChange={(e) => {
                    const value = e.target.value;
                    setFormData(prev => ({ 
                      ...prev, 
                      price: value === '' ? undefined : parseFloat(value) || undefined 
                    }));
                  }}
                  disabled={isLoading}
                  className="cursor-text"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è "–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <Label>–í–∞—Ä–∏–∞–Ω—Ç—ã —É—á–∞—Å—Ç–∏—è *</Label>
                  <Button
                    type="button"
                    onClick={addVariant}
                    disabled={isLoading}
                    size="sm"
                    className="cursor-pointer"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
                  </Button>
                </div>
                
                {formData.variants?.map((variant, index) => (
                  <div key={variant.id} className="p-4 border rounded-lg space-y-4">
                    <div className="flex items-center justify-between">
                      <h4 className="font-medium">–í–∞—Ä–∏–∞–Ω—Ç {index + 1}</h4>
                      <Button
                        type="button"
                        onClick={() => removeVariant(variant.id)}
                        disabled={isLoading}
                        variant="ghost"
                        size="sm"
                        className="text-destructive hover:text-destructive cursor-pointer"
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                    
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <Label className="mb-2 block">–ù–∞–∑–≤–∞–Ω–∏–µ *</Label>
                          <Input
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç–∞–Ω–¥–∞—Ä—Ç"
                            value={variant.name}
                            onChange={(e) => updateVariant(variant.id, 'name', e.target.value)}
                            disabled={isLoading}
                            className="cursor-text"
                          />
                        </div>
                        <div>
                          <Label className="mb-2 block">–¶–µ–Ω–∞ (‚ÇΩ)</Label>
                          <Input
                            type="number"
                            placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è '—Ü–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É'"
                            value={variant.price || ''}
                            onChange={(e) => {
                              const value = e.target.value;
                              updateVariant(variant.id, 'price', value === '' ? undefined : parseFloat(value) || undefined);
                            }}
                            disabled={isLoading}
                            className="cursor-text"
                          />
                        </div>
                      </div>
                      <div>
                        <Label className="mb-2 block">–û–ø–∏—Å–∞–Ω–∏–µ *</Label>
                        <Textarea
                          placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                          value={variant.description}
                          onChange={(e) => updateVariant(variant.id, 'description', e.target.value)}
                          disabled={isLoading}
                          className="cursor-text min-h-[80px] w-full"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
          <div className="space-y-4">
            <Label>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—ç–º–ø–∞</Label>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <input
                  type="radio"
                  id="url"
                  checked={imageInputType === 'url'}
                  onChange={() => setImageInputType('url')}
                  disabled={isLoading}
                  className="cursor-pointer"
                />
                <Label htmlFor="url" className="cursor-pointer">URL</Label>
              </div>
              <div className="flex items-center space-x-2">
                <input
                  type="radio"
                  id="file"
                  checked={imageInputType === 'file'}
                  onChange={() => setImageInputType('file')}
                  disabled={isLoading}
                  className="cursor-pointer"
                />
                <Label htmlFor="file" className="cursor-pointer">–§–∞–π–ª</Label>
              </div>
            </div>
            
            {imageInputType === 'url' ? (
              <div className="relative">
                <Input
                  placeholder="https://example.com/image.jpg"
                  value={formData.image}
                  onChange={(e) => setFormData(prev => ({ ...prev, image: e.target.value }))}
                  disabled={isLoading}
                  className="cursor-text"
                />
              </div>
            ) : (
              <div className="relative">
                <Upload className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  type="file"
                  accept="image/*"
                  onChange={handleFileSelect}
                  disabled={isLoading}
                  className="pl-10 cursor-pointer"
                />
              </div>
            )}
          </div>

          {/* –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <Label>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫—ç–º–ø–∞</Label>
              <Button
                type="button"
                onClick={addFeature}
                disabled={isLoading || !newFeature.trim()}
                size="sm"
                className="cursor-pointer"
              >
                <Plus className="h-4 w-4 mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </div>
            
            <div className="flex items-center gap-2">
              <Input
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Wi-Fi, –±–∞—Å—Å–µ–π–Ω, —Å–ø–æ—Ä—Ç–∑–∞–ª"
                value={newFeature}
                onChange={(e) => setNewFeature(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addFeature())}
                disabled={isLoading}
                className="cursor-text"
              />
            </div>
            
            {formData.features.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {formData.features.map((feature, index) => (
                  <Badge key={index} variant="secondary" className="cursor-default">
                    {feature}
                    <button
                      type="button"
                      onClick={() => removeFeature(feature)}
                      disabled={isLoading}
                      className="ml-1 hover:text-destructive cursor-pointer"
                    >
                      <X className="h-3 w-3" />
                    </button>
                  </Badge>
                ))}
              </div>
            )}
          </div>

          {/* –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <Label>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å</Label>
              <Button
                type="button"
                onClick={addIncluded}
                disabled={isLoading || !newIncluded.trim()}
                size="sm"
                className="cursor-pointer"
              >
                <Plus className="h-4 w-4 mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </div>
            
            <div className="flex items-center gap-2">
              <Input
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, –ø–∏—Ç–∞–Ω–∏–µ, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä"
                value={newIncluded}
                onChange={(e) => setNewIncluded(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addIncluded())}
                disabled={isLoading}
                className="cursor-text"
              />
            </div>
            
            {formData.included.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {formData.included.map((item, index) => (
                  <Badge key={index} variant="outline" className="cursor-default">
                    {item}
                    <button
                      type="button"
                      onClick={() => removeIncluded(item)}
                      disabled={isLoading}
                      className="ml-1 hover:text-destructive cursor-pointer"
                    >
                      <X className="h-3 w-3" />
                    </button>
                  </Badge>
                ))}
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-3 justify-end">
            {onCancel && (
              <Button
                type="button"
                variant="outline"
                onClick={onCancel}
                disabled={isLoading}
                className="cursor-pointer"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            )}
            <Button
              type="submit"
              disabled={isLoading}
              className="cursor-pointer"
            >
              {isLoading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  {isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –∫—ç–º–ø'}
                </>
              )}
            </Button>
          </div>
        </form>
        )}
      </CardContent>
    </Card>
  );
}; 