'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { AdminOnly } from '@/components/RoleProtected';
import { getAllCamps, deleteCamp } from '@/lib/campService';
import { Camp, CampType } from '@/types/camp';
import { Calendar, MapPin, Users, Edit, Trash2, Plus, Search, Loader2 } from 'lucide-react';
import { toast } from 'sonner';
import Link from 'next/link';

export default function AdminCampsPage() {
  const [camps, setCamps] = useState<Camp[]>([]);
  const [loading, setLoading] = useState(true);
  const [deleting, setDeleting] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [typeFilter, setTypeFilter] = useState<CampType | 'all'>('all');

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU').format(price);
  };

  const getPriceDisplay = (camp: Camp) => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
    if (camp.variants && camp.variants.length > 0) {
      const prices = camp.variants.map((v) => v.price);
      const minPrice = Math.min(...prices);
      const maxPrice = Math.max(...prices);
      
      if (minPrice === maxPrice) {
        return `${formatPrice(minPrice)} ‚ÇΩ`;
      } else {
        return `${formatPrice(minPrice)} - ${formatPrice(maxPrice)} ‚ÇΩ`;
      }
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
    if (camp.price) {
      return `${formatPrice(camp.price)} ‚ÇΩ`;
    }
    
    return '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
  };

  const loadCamps = async () => {
    try {
      setLoading(true);
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç–º–ø—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      const campsData = await getAllCamps();
      setCamps(campsData);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${campsData.length} –∫—ç–º–ø–æ–≤`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç–º–ø–æ–≤:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç–º–ø—ã');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadCamps();
  }, []);

  const handleDelete = async (campId: string, campTitle: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—ç–º–ø "${campTitle}"?`)) {
      return;
    }

    try {
      setDeleting(campId);
      await deleteCamp(campId);
      toast.success('–ö—ç–º–ø —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      loadCamps(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—ç–º–ø–∞:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—ç–º–ø');
    } finally {
      setDeleting(null);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—ç–º–ø–æ–≤
  const filteredCamps = camps.filter(camp => {
    const matchesSearch = camp.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         camp.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         camp.location.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = typeFilter === 'all' || camp.type === typeFilter;
    return matchesSearch && matchesType;
  });

  const campTypes: (CampType | 'all')[] = [
    'all',
    '–ª–µ—Ç–Ω–∏–π',
    '–∑–∏–º–Ω–∏–π',
    '—è–∑—ã–∫–æ–≤–æ–π',
    '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π',
    '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π',
    '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π',
    '–ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π',
    '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π',
  ];

  const getTypeLabel = (type: CampType | 'all') => {
    return type === 'all' ? '–í—Å–µ —Ç–∏–ø—ã' : type;
  };

  return (
    <AdminOnly fallback={
      <div className="container mx-auto px-4 py-8 text-center">
        <h1 className="text-2xl font-bold text-destructive">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
        <p className="text-muted-foreground mt-2">
          –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫—ç–º–ø–∞–º–∏.
        </p>
      </div>
    }>
      <div className="container mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
          <div>
            <h1 className="text-3xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç–º–ø–∞–º–∏</h1>
            <p className="text-muted-foreground mt-2">
              {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : `–ù–∞–π–¥–µ–Ω–æ ${filteredCamps.length} –∏–∑ ${camps.length} –∫—ç–º–ø–æ–≤`}
            </p>
          </div>
          <Link href="/admin/camps/create">
            <Button className="flex items-center gap-2">
              <Plus className="h-4 w-4" />
              –°–æ–∑–¥–∞—Ç—å –∫—ç–º–ø
            </Button>
          </Link>
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-lg">–§–∏–ª—å—Ç—Ä—ã</CardTitle>
            <CardDescription>
              –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—ç–º–ø–æ–≤
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <div className="w-full sm:w-48">
                <Select value={typeFilter} onValueChange={(value) => setTypeFilter(value as CampType | 'all')}>
                  <SelectTrigger>
                    <SelectValue placeholder="–¢–∏–ø –∫—ç–º–ø–∞" />
                  </SelectTrigger>
                  <SelectContent>
                    {campTypes.map((type) => (
                      <SelectItem key={type} value={type}>
                        {getTypeLabel(type)}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –°–ø–∏—Å–æ–∫ –∫—ç–º–ø–æ–≤ */}
        {loading ? (
          <Card>
            <CardContent className="flex items-center justify-center py-12">
              <Loader2 className="h-8 w-8 animate-spin mr-2" />
              <span>–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç–º–ø–æ–≤...</span>
            </CardContent>
          </Card>
        ) : filteredCamps.length === 0 ? (
          <Card>
            <CardContent className="text-center py-12">
              <Calendar className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50" />
              <h3 className="text-lg font-semibold mb-2">–ö—ç–º–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
              <p className="text-muted-foreground mb-4">
                {searchTerm || typeFilter !== 'all' 
                  ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
                  : '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫—ç–º–ø, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'
                }
              </p>
              {(!searchTerm && typeFilter === 'all') && (
                <Link href="/admin/camps/create">
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫—ç–º–ø
                  </Button>
                </Link>
              )}
            </CardContent>
          </Card>
        ) : (
          <div className="grid gap-6">
            {filteredCamps.map((camp) => (
              <Card key={camp.id} className="overflow-hidden">
                <div className="flex flex-col lg:flex-row">
                  {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                  {camp.image && (
                    <div className="lg:w-48 h-48 lg:h-auto">
                      <img
                        src={camp.image}
                        alt={camp.title}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  )}
                  
                  {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
                  <div className="flex-1 p-6">
                    <div className="flex flex-col lg:flex-row lg:items-start justify-between gap-4">
                      <div className="flex-1">
                        <div className="flex items-start justify-between mb-3">
                          <div>
                            <h3 className="text-xl font-semibold mb-2">{camp.title}</h3>
                            <p className="text-muted-foreground mb-3 line-clamp-2">
                              {camp.description}
                            </p>
                          </div>
                        </div>
                        
                        <div className="flex flex-wrap items-center gap-4 text-sm text-muted-foreground mb-3">
                          <div className="flex items-center gap-1">
                            <Calendar className="h-4 w-4" />
                            <span>
                              {camp.startDate.toLocaleDateString('ru-RU')} - {camp.endDate.toLocaleDateString('ru-RU')}
                            </span>
                          </div>
                          <div className="flex items-center gap-1">
                            <MapPin className="h-4 w-4" />
                            <span>{camp.location}</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <Users className="h-4 w-4" />
                            <span>{camp.ageGroup}</span>
                          </div>
                        </div>
                        
                        <div className="flex flex-wrap gap-2 mb-3">
                          <Badge variant="secondary">{camp.type}</Badge>
                          <Badge variant="outline">{camp.difficulty}</Badge>
                          <Badge variant="outline">{camp.organizer}</Badge>
                        </div>
                      </div>
                      
                      {/* –¶–µ–Ω–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
                      <div className="flex flex-col items-end gap-3">
                        <div className="text-right">
                          <div className="text-2xl font-bold">
                            {getPriceDisplay(camp)}
                          </div>
                          <div className="text-sm text-muted-foreground">
                            –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                          </div>
                        </div>
                        
                        <div className="flex gap-2">
                          <Link href={`/camps/${camp.id}`}>
                            <Button variant="outline" size="sm">
                              <Edit className="h-4 w-4 mr-1" />
                              –ü—Ä–æ—Å–º–æ—Ç—Ä
                            </Button>
                          </Link>
                          <Link href={`/admin/camps/${camp.id}/edit`}>
                            <Button variant="outline" size="sm">
                              <Edit className="h-4 w-4 mr-1" />
                              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </Button>
                          </Link>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleDelete(camp.id, camp.title)}
                            disabled={deleting === camp.id}
                            className="text-destructive hover:text-destructive"
                          >
                            {deleting === camp.id ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : (
                              <Trash2 className="h-4 w-4" />
                            )}
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        )}
      </div>
    </AdminOnly>
  );
} 