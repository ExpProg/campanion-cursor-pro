'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { collection, getDocs, doc, updateDoc, addDoc, setDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { toast } from 'sonner';
import { AdminOnly } from '@/components/RoleProtected';
import { seedCampTypes } from '@/lib/campTypeService';

export default function MigratePage() {
  const [isLoading, setIsLoading] = useState(false);

  const migrateCamps = async () => {
    setIsLoading(true);
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫—ç–º–ø–æ–≤...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—ç–º–ø—ã
      const campsSnapshot = await getDocs(collection(db, 'camps'));
      const camps = campsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as any[];
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${camps.length} –∫—ç–º–ø–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
      
      let updatedCount = 0;
      
      for (const camp of camps) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç–º–ø ${camp.id}:`, camp);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ organizerId
        if (!camp.organizerId && camp.organizer) {
          console.log(`‚ö†Ô∏è –ö—ç–º–ø ${camp.id} –∏–º–µ–µ—Ç organizer="${camp.organizer}" –Ω–æ –Ω–µ—Ç organizerId`);
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
          const organizersSnapshot = await getDocs(collection(db, 'organizers'));
          const organizers = organizersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as any[];
          
          if (organizers.length > 0) {
            const firstOrganizer = organizers[0];
            console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞: ${firstOrganizer.name} (${firstOrganizer.id})`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç–º–ø
            await updateDoc(doc(db, 'camps', camp.id), {
              organizerId: firstOrganizer.id,
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ organizer –∫–∞–∫ backup
              organizerBackup: camp.organizer
            });
            
            updatedCount++;
            console.log(`‚úÖ –ö—ç–º–ø ${camp.id} –æ–±–Ω–æ–≤–ª–µ–Ω`);
          } else {
            console.log(`‚ùå –ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–ª—è –∫—ç–º–ø–∞ ${camp.id}`);
          }
        } else if (camp.organizerId) {
          console.log(`‚úÖ –ö—ç–º–ø ${camp.id} —É–∂–µ –∏–º–µ–µ—Ç organizerId: ${camp.organizerId}`);
        } else {
          console.log(`‚ùå –ö—ç–º–ø ${camp.id} –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ organizer, –Ω–∏ organizerId`);
        }
      }
      
      console.log(`üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –∫—ç–º–ø–æ–≤`);
      toast.success(`–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –∫—ç–º–ø–æ–≤`);
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      toast.error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é');
    } finally {
      setIsLoading(false);
    }
  };

  const checkMissingOrganizers = async () => {
    setIsLoading(true);
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—ç–º–ø—ã
      const campsSnapshot = await getDocs(collection(db, 'camps'));
      const camps = campsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as any[];
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
      const organizersSnapshot = await getDocs(collection(db, 'organizers'));
      const organizers = organizersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as any[];
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${camps.length} –∫—ç–º–ø–æ–≤ –∏ ${organizers.length} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤`);
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ organizerId –∏–∑ –∫—ç–º–ø–æ–≤
      const usedOrganizerIds = new Set<string>();
      camps.forEach(camp => {
        if (camp.organizerId) {
          usedOrganizerIds.add(camp.organizerId);
        }
      });
      
      console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ organizerId:', Array.from(usedOrganizerIds));
      console.log('üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã:', organizers.map(o => o.id));
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
      const missingOrganizerIds = Array.from(usedOrganizerIds).filter(id => 
        !organizers.some(org => org.id === id)
      );
      
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã:', missingOrganizerIds);
      
      if (missingOrganizerIds.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
        for (const missingId of missingOrganizerIds) {
          console.log(`‚ûï –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —Å ID: ${missingId}`);
          
          await setDoc(doc(db, 'organizers', missingId), {
            id: missingId, // –≠—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, Firestore —Å–∞–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID
            name: `–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä ${missingId.slice(0, 8)}...`,
            email: `organizer-${missingId.slice(0, 8)}@example.com`,
            createdAt: new Date(),
            updatedAt: new Date(),
          });
          
          console.log(`‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω`);
        }
        
        toast.success(`–°–æ–∑–¥–∞–Ω–æ ${missingOrganizerIds.length} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤`);
      } else {
        toast.success('–í—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
      }
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:', error);
      toast.error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤');
    } finally {
      setIsLoading(false);
    }
  };

  const showDetailedInfo = async () => {
    setIsLoading(true);
    try {
      console.log('üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—ç–º–ø—ã
      const campsSnapshot = await getDocs(collection(db, 'camps'));
      const camps = campsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as any[];
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
      const organizersSnapshot = await getDocs(collection(db, 'organizers'));
      const organizers = organizersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as any[];
      
      console.log('üìä –í–°–ï –ö–≠–ú–ü–´:');
      camps.forEach(camp => {
        console.log(`  –ö—ç–º–ø ${camp.id}:`, {
          title: camp.title,
          organizerId: camp.organizerId,
          organizer: camp.organizer,
          type: camp.type,
          status: camp.status
        });
      });
      
      console.log('üìä –í–°–ï –û–†–ì–ê–ù–ò–ó–ê–¢–û–†–´:');
      organizers.forEach(org => {
        console.log(`  –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä ${org.id}:`, {
          name: org.name,
          email: org.email
        });
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫—ç–º–ø
      console.log('üîç –ü–†–û–í–ï–†–ö–ê –ö–≠–ú–ü–û–í:');
      camps.forEach(camp => {
        if (camp.organizerId) {
          const organizer = organizers.find(o => o.id === camp.organizerId);
          if (organizer) {
            console.log(`‚úÖ –ö—ç–º–ø ${camp.id}: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω - ${organizer.name}`);
          } else {
            console.log(`‚ùå –ö—ç–º–ø ${camp.id}: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ù–ï –ù–ê–ô–î–ï–ù (ID: ${camp.organizerId})`);
          }
        } else {
          console.log(`‚ö†Ô∏è –ö—ç–º–ø ${camp.id}: –Ω–µ—Ç organizerId`);
        }
      });
      
      toast.success('–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å');
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
      toast.error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    } finally {
      setIsLoading(false);
    }
  };

  const seedCampTypesData = async () => {
    setIsLoading(true);
    try {
      console.log('üå± –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤...');
      await seedCampTypes();
      console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤ —Å–æ–∑–¥–∞–Ω—ã');
      toast.success('–ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤ —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∫—ç–º–ø–æ–≤:', error);
      toast.error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AdminOnly fallback={
      <div className="container mx-auto px-4 py-8 text-center">
        <h1 className="text-2xl font-bold text-destructive">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
        <p className="text-muted-foreground mt-2">
          –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏.
        </p>
      </div>
    }>
      <div className="container mx-auto px-4 py-8">
        <div className="mb-6">
          <h1 className="text-3xl font-bold">–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</h1>
          <p className="text-muted-foreground mt-2">
            –û–±–Ω–æ–≤–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—ç–º–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.
          </p>
        </div>
        
        <Card className="w-full max-w-2xl mx-auto">
          <CardHeader>
            <CardTitle>–ú–∏–≥—Ä–∞—Ü–∏—è –∫—ç–º–ø–æ–≤</CardTitle>
            <CardDescription>
              –î–æ–±–∞–≤–∏—Ç organizerId –∫ –∫—ç–º–ø–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.
              –°—Ç–∞—Ä—ã–µ –∫—ç–º–ø—ã –ø–æ–ª—É—á–∞—Ç organizerId –ø–µ—Ä–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <Button 
                onClick={migrateCamps} 
                disabled={isLoading}
                className="w-full"
              >
                {isLoading ? '–ú–∏–≥—Ä–∞—Ü–∏—è...' : '–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é'}
              </Button>
              
              <Button 
                onClick={checkMissingOrganizers} 
                disabled={isLoading}
                variant="outline"
                className="w-full"
              >
                {isLoading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤'}
              </Button>
              
              <Button 
                onClick={showDetailedInfo} 
                disabled={isLoading}
                variant="outline"
                className="w-full"
              >
                {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'}
              </Button>

              <Button 
                onClick={seedCampTypesData} 
                disabled={isLoading}
                variant="outline"
                className="w-full"
              >
                {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤...' : '–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∫—ç–º–ø–æ–≤'}
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </AdminOnly>
  );
} 